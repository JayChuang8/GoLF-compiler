Run started on Mon Aug 14 09:29:33 2023

Hostname: Q-LTOP-12

-------------------------------------------------------------------------------
Running make |
--------------

% /usr/bin/make

STDOUT:
/usr/bin/make -C Scanner
make[1]: Entering directory '/mnt/c/Projects/golf-compiler/Scanner'
make[1]: Nothing to be done for 'all'.
make[1]: Leaving directory '/mnt/c/Projects/golf-compiler/Scanner'
/usr/bin/make -C Utility
make[1]: Entering directory '/mnt/c/Projects/golf-compiler/Utility'
make[1]: Nothing to be done for 'all'.
make[1]: Leaving directory '/mnt/c/Projects/golf-compiler/Utility'
/usr/bin/make -C Parser
make[1]: Entering directory '/mnt/c/Projects/golf-compiler/Parser'
make[1]: Nothing to be done for 'all'.
make[1]: Leaving directory '/mnt/c/Projects/golf-compiler/Parser'
/usr/bin/make -C SemanticChecker
make[1]: Entering directory '/mnt/c/Projects/golf-compiler/SemanticChecker'
make[1]: Nothing to be done for 'all'.
make[1]: Leaving directory '/mnt/c/Projects/golf-compiler/SemanticChecker'
/usr/bin/make -C Generator
make[1]: Entering directory '/mnt/c/Projects/golf-compiler/Generator'
make[1]: Nothing to be done for 'all'.
make[1]: Leaving directory '/mnt/c/Projects/golf-compiler/Generator'
g++ -o main.o -c main.cpp -MMD -MF main.d
g++ -o golf main.o Scanner/token.o Scanner/scanner.o Utility/utility.o Parser/parser.o Parser/ast.o SemanticChecker/semantic.o SemanticChecker/stab.o Generator/backend_asm.o


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Locating GoLF compiler |
------------------------

Compiler will be run as ./golf

-------------------------------------------------------------------------------
Test: too few arguments |
-------------------------

% ./golf

STDOUT:


STDERR:
Error: Requires 1 input file


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: too many arguments |
--------------------------

% ./golf /dev/null /dev/zero

STDOUT:


STDERR:
Error: Requires 1 input file


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: nonexistent file |
------------------------

% ./golf /i/do/not/exist

STDOUT:


STDERR:
error: file '/i/do/not/exist' could not be opened


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: later global "int" redeclaration |
----------------------------------------

% ./golf ./test/ms3/check.t1

STDOUT:


STDERR:
error: expected type, got "int" at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: global var declaration loop |
-----------------------------------

% ./golf ./test/ms3/check.t2

STDOUT:


STDERR:
error: expected type, got "int" at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: local var version of check.t2 |
-------------------------------------

% ./golf ./test/ms3/check.t3

STDOUT:
program 
    func sym=0x55ad61049538 @ line 4
        newid [main] @ line 4
        sig 
            formals 
            typeid [$void] sym=0x55ad61043f68
        block 
            var sym=0x55ad61049618 @ line 5
                newid [int] @ line 5
                typeid [int] sym=0x55ad61049618 @ line 5
            exprstmt  @ line 6
                funccall  sig=void  @ line 6
                    id [printi] sig=f(int)  sym=0x55ad61048fe8 @ line 6
                    actuals 
                        id [int] sig=int  sym=0x55ad61049618 @ line 6


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: global name test |
------------------------

% ./golf ./test/ms3/check.t4

STDOUT:
program 
    globvar sym=0x555f0ab53568 @ line 3
        newid [b4int] @ line 3
        typeid [int] sym=0x555f0ab529f8 @ line 3
    func sym=0x555f0ab53648 @ line 5
        newid [b4func] @ line 5
        sig 
            formals 
            typeid [$void] sym=0x555f0ab4aa88
        block 
            exprstmt  @ line 6
                funccall  sig=void  @ line 6
                    id [printi] sig=f(int)  sym=0x555f0ab53018 @ line 6
                    actuals 
                        id [b4int] sig=int  sym=0x555f0ab53568 @ line 6
            exprstmt  @ line 7
                funccall  sig=void  @ line 7
                    id [printi] sig=f(int)  sym=0x555f0ab53018 @ line 7
                    actuals 
                        id [aft3rint] sig=int  sym=0x555f0ab538e8 @ line 7
            exprstmt  @ line 8
                funccall  sig=$void  @ line 8
                    id [aft3rfunc] sig=f()  sym=0x555f0ab53808 @ line 8
    func sym=0x555f0ab53728 @ line 11
        newid [main] @ line 11
        sig 
            formals 
            typeid [$void] sym=0x555f0ab4aa88
        block 
            exprstmt  @ line 12
                funccall  sig=$void  @ line 12
                    id [b4func] sig=f()  sym=0x555f0ab53648 @ line 12
    func sym=0x555f0ab53808 @ line 15
        newid [aft3rfunc] @ line 15
        sig 
            formals 
            typeid [$void] sym=0x555f0ab4aa88
        block 
            exprstmt  @ line 16
                funccall  sig=void  @ line 16
                    id [printi] sig=f(int)  sym=0x555f0ab53018 @ line 16
                    actuals 
                        id [b4int] sig=int  sym=0x555f0ab53568 @ line 16
            exprstmt  @ line 17
                funccall  sig=void  @ line 17
                    id [printi] sig=f(int)  sym=0x555f0ab53018 @ line 17
                    actuals 
                        id [aft3rint] sig=int  sym=0x555f0ab538e8 @ line 17
    globvar sym=0x555f0ab538e8 @ line 20
        newid [aft3rint] @ line 20
        typeid [int] sym=0x555f0ab529f8 @ line 20


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: block scope check |
-------------------------

% ./golf ./test/ms3/check.t5

STDOUT:
program 
    func sym=0x563f28aa1168 @ line 3
        newid [main] @ line 3
        sig 
            formals 
            typeid [$void] sym=0x563f28a98d08
        block 
            var sym=0x563f28aa1248 @ line 4
                newid [x] @ line 4
                typeid [int] sym=0x563f28a98218 @ line 4
            block 
                var sym=0x563f28aa1328 @ line 6
                    newid [x] @ line 6
                    typeid [bool] sym=0x563f28a984d8 @ line 6
                block 
                    var sym=0x563f28aa1408 @ line 8
                        newid [x] @ line 8
                        typeid [string] sym=0x563f28a99198 @ line 8
                    =  @ line 9
                        id [x] sig=string  sym=0x563f28aa1408 @ line 9
                        string [asdf] sig=string  @ line 9
                    block 
                        var sym=0x563f28aa14e8 @ line 11
                            newid [x] @ line 11
                            typeid [int] sym=0x563f28a98218 @ line 11
                        =  @ line 12
                            id [x] sig=int  sym=0x563f28aa14e8 @ line 12
                            +  sig=int  @ line 12
                                id [x] sig=int  sym=0x563f28aa14e8 @ line 12
                                int [1] sig=int  @ line 12
                    exprstmt  @ line 14
                        funccall  sig=void  @ line 14
                            id [prints] sig=f(string)  sym=0x563f28aa1d68 @ line 14
                            actuals 
                                id [x] sig=string  sym=0x563f28aa1408 @ line 14
                exprstmt  @ line 16
                    funccall  sig=void  @ line 16
                        id [printb] sig=f(bool)  sym=0x563f28a9e8c8 @ line 16
                        actuals 
                            id [x] sig=bool  sym=0x563f28aa1328 @ line 16
            exprstmt  @ line 18
                funccall  sig=void  @ line 18
                    id [printi] sig=f(int)  sym=0x563f28aa1c88 @ line 18
                    actuals 
                        id [x] sig=int  sym=0x563f28aa1248 @ line 18


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: global var declaration, complex loop |
--------------------------------------------

% ./golf ./test/ms3/check.t6

STDOUT:


STDERR:
error: expected type, got "bool" at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: parameter scope test |
----------------------------

% ./golf ./test/ms3/check.t7

STDOUT:


STDERR:
error: expected type, got "int" at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: constants can't be changed |
----------------------------------

% ./golf ./test/ms3/check.t8

STDOUT:


STDERR:
error: can't assign to a constant at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent type name |
-----------------------------

% ./golf ./test/ms3/check.t9

STDOUT:


STDERR:
error: unknown identifier "notthere" at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: type name not a type |
----------------------------

% ./golf ./test/ms3/check.t10

STDOUT:


STDERR:
error: expected type, got "t" at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: formal parameters need types |
------------------------------------

% ./golf ./test/ms3/check.t11

STDOUT:


STDERR:
error: expected type, got "main" at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: multiple (main) functions, same name |
--------------------------------------------

% ./golf ./test/ms3/check.t12

STDOUT:


STDERR:
error: "main" redefined at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: no main function |
------------------------

% ./golf ./test/ms3/check.t13

STDOUT:


STDERR:
error: missing main() function


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: main can't have arguments |
---------------------------------

% ./golf ./test/ms3/check.t14

STDOUT:


STDERR:
error: main() can't have arguments at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: main can't have a return value |
--------------------------------------

% ./golf ./test/ms3/check.t15

STDOUT:


STDERR:
error: main() can't have a return value at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: dup check for formal parameters |
---------------------------------------

% ./golf ./test/ms3/check.t16

STDOUT:


STDERR:
error: "i" redefined at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: function call as lvalue |
-------------------------------

% ./golf ./test/ms3/check.t17

STDOUT:


STDERR:
error: can only assign to a variable at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: function name as lvalue |
-------------------------------

% ./golf ./test/ms3/check.t18

STDOUT:


STDERR:
error: operand type mismatch for "=" at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: humongous integer literal |
---------------------------------

% ./golf ./test/ms3/check.t19

STDOUT:


STDERR:
error: integer literal out of range at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: positive integer literal out of range |
---------------------------------------------

% ./golf ./test/ms3/check.t20

STDOUT:


STDERR:
error: integer literal out of range at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: negative integer literal out of range |
---------------------------------------------

% ./golf ./test/ms3/check.t21

STDOUT:


STDERR:
error: integer literal out of range at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" not inside "for" loop |
-------------------------------------

% ./golf ./test/ms3/check.t22

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" in block, but not in "for" |
------------------------------------------

% ./golf ./test/ms3/check.t23

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" in "if" block |
-----------------------------

% ./golf ./test/ms3/check.t24

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: missing return statement |
--------------------------------

% ./golf ./test/ms3/check.t25

STDOUT:


STDERR:
error: no return statement in function at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: returning value from void function |
------------------------------------------

% ./golf ./test/ms3/check.t26

STDOUT:


STDERR:
error: this function can't return a value at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: return type mismatch |
----------------------------

% ./golf ./test/ms3/check.t27

STDOUT:


STDERR:
error: returned value has the wrong type at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: missing return type |
---------------------------

% ./golf ./test/ms3/check.t28

STDOUT:


STDERR:
error: this function must return a value at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" expr not a boolean type |
------------------------------------

% ./golf ./test/ms3/check.t29

STDOUT:


STDERR:
error: if expression must be boolean type at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if"-"else" not a boolean type |
--------------------------------------

% ./golf ./test/ms3/check.t30

STDOUT:


STDERR:
error: ifelse expression must be boolean type at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" expr not a boolean type |
-------------------------------------

% ./golf ./test/ms3/check.t31

STDOUT:


STDERR:
error: for expression must be boolean type at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: legit expression statements |
-----------------------------------

% ./golf ./test/ms3/check.t32

STDOUT:
program 
    func sym=0x563d3f10b6f8 @ line 3
        newid [main] @ line 3
        sig 
            formals 
            typeid [$void] sym=0x563d3f105f68
        block 
            var sym=0x563d3f10b7d8 @ line 4
                newid [i] @ line 4
                typeid [int] sym=0x563d3f106288 @ line 4
            exprstmt  @ line 5
                id [i] sig=int  sym=0x563d3f10b7d8 @ line 5
            exprstmt  @ line 6
                int [42] sig=int  @ line 6


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: built-in routine check |
------------------------------

% ./golf ./test/ms3/check.t33

STDOUT:
program 
    func sym=0x55e4003d9408 @ line 3
        newid [main] @ line 3
        sig 
            formals 
            typeid [$void] sym=0x55e4003d7e98
        block 
            exprstmt  @ line 4
                funccall  sig=void  @ line 4
                    id [prints] sig=f(string)  sym=0x55e4003d8f98 @ line 4
                    actuals 
                        string [Hello, world!\n] sig=string  @ line 4
            exprstmt  @ line 5
                funccall  sig=void  @ line 5
                    id [printb] sig=f(bool)  sym=0x55e4003d7a88 @ line 5
                    actuals 
                        id [true] sig=bool  sym=0x55e4003d78c8 @ line 5
            exprstmt  @ line 6
                funccall  sig=void  @ line 6
                    id [printi] sig=f(int)  sym=0x55e4003d7c48 @ line 6
                    actuals 
                        int [123] sig=int  @ line 6
            exprstmt  @ line 7
                funccall  sig=void  @ line 7
                    id [printc] sig=f(int)  sym=0x55e4003d7b68 @ line 7
                    actuals 
                        int [123] sig=int  @ line 7
            var sym=0x55e4003d94e8 @ line 8
                newid [ch] @ line 8
                typeid [int] sym=0x55e4003d2b68 @ line 8
            =  @ line 9
                id [ch] sig=int  sym=0x55e4003d94e8 @ line 9
                funccall  sig=int  @ line 9
                    id [getchar] sig=f()  sym=0x55e4003d9078 @ line 9
            exprstmt  @ line 10
                funccall  sig=void  @ line 10
                    id [halt] sig=f()  sym=0x55e4003d9158 @ line 10


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: actual parameter type check |
-----------------------------------

% ./golf ./test/ms3/check.t34

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: operand type mismatch |
-----------------------------

% ./golf ./test/ms3/check.t35

STDOUT:


STDERR:
error: operand type mismatch for "+" at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: another actual parameter type check |
-------------------------------------------

% ./golf ./test/ms3/check.t36

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: return+argument checks |
------------------------------

% ./golf ./test/ms3/check.t37

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 8


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: scope check and undefined variable |
------------------------------------------

% ./golf ./test/ms3/check.t38

STDOUT:


STDERR:
error: unknown identifier "c" at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: redefined variable |
--------------------------

% ./golf ./test/ms3/check.t39

STDOUT:


STDERR:
error: "b" redefined at or near line 13


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: comparable and ordered comparisons |
------------------------------------------

% ./golf ./test/ms3/check.t40

STDOUT:


STDERR:
error: operand type mismatch for ">" at or near line 8


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: int/bool distinction |
----------------------------

% ./golf ./test/ms3/check.t41

STDOUT:


STDERR:
error: operand type mismatch for "=" at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: deep type propagation |
-----------------------------

% ./golf ./test/ms3/check.t42

STDOUT:
program 
    func sym=0x564fca862af8 @ line 3
        newid [main] @ line 3
        sig 
            formals 
            typeid [$void] sym=0x564fca85bf68
        block 
            var sym=0x564fca862bd8 @ line 4
                newid [x] @ line 4
                typeid [int] sym=0x564fca85a6e8 @ line 4
            exprstmt  @ line 5
                >=  sig=bool  @ line 5
                    -  sig=int  @ line 5
                        +  sig=int  @ line 5
                            int [2] sig=int  @ line 5
                            *  sig=int  @ line 5
                                int [3] sig=int  @ line 5
                                int [5] sig=int  @ line 5
                        int [123] sig=int  @ line 5
                    u-  sig=int  @ line 5
                        u-  sig=int  @ line 5
                            u-  sig=int  @ line 5
                                id [x] sig=int  sym=0x564fca862bd8 @ line 5
            var sym=0x564fca862cb8 @ line 7
                newid [b] @ line 7
                typeid [bool] sym=0x564fca85c0f8 @ line 7
            exprstmt  @ line 8
                !=  sig=bool  @ line 8
                    u!  sig=bool  @ line 8
                        u!  sig=bool  @ line 8
                            u!  sig=bool  @ line 8
                                ||  sig=bool  @ line 8
                                    &&  sig=bool  @ line 8
                                        id [true] sig=bool  sym=0x564fca861448 @ line 8
                                        id [false] sig=bool  sym=0x564fca85b198 @ line 8
                                    ==  sig=bool  @ line 8
                                        id [b] sig=bool  sym=0x564fca862cb8 @ line 8
                                        id [true] sig=bool  sym=0x564fca861448 @ line 8
                    <=  sig=bool  @ line 8
                        int [5] sig=int  @ line 8
                        int [6] sig=int  @ line 8


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: redefining "true" and "false" |
-------------------------------------

% ./golf ./test/ms3/check.t43

STDOUT:
program 
    globvar sym=0x5645632e9ac8 @ line 3
        newid [true] @ line 3
        typeid [int] sym=0x5645632e4288 @ line 3
    func sym=0x5645632e9ba8 @ line 5
        newid [main] @ line 5
        sig 
            formals 
            typeid [$void] sym=0x5645632e3f68
        block 
            var sym=0x5645632e9c88 @ line 6
                newid [false] @ line 6
                typeid [int] sym=0x5645632e4288 @ line 6
            exprstmt  @ line 7
                funccall  sig=void  @ line 7
                    id [printi] sig=f(int)  sym=0x5645632e9578 @ line 7
                    actuals 
                        *  sig=int  @ line 7
                            id [true] sig=int  sym=0x5645632e9ac8 @ line 7
                            id [false] sig=int  sym=0x5645632e9c88 @ line 7


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: call of non-function |
----------------------------

% ./golf ./test/ms3/check.t44

STDOUT:


STDERR:
error: can't call something that isn't a function at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: type id used in wrong context |
-------------------------------------

% ./golf ./test/ms3/check.t45

STDOUT:


STDERR:
error: can't use type "int" here at or near line 5


RETURN CODE: 1

Run ended on Mon Aug 14 09:29:37 2023

